parameters:
  EnableAPIScan:
  TSAUpload:

steps:

- powershell: echo "##vso[build.addbuildtag]compliance"
  displayName: üè∑Ô∏è Tag run with 'compliance'

- task: CredScan@3
  displayName: üîç Run CredScan

- task: PoliCheck@2
  displayName: üîç Run PoliCheck
  inputs:
    targetType: F
    targetArgument: $(System.DefaultWorkingDirectory)
    optionsUEPATH: $(System.DefaultWorkingDirectory)\azure-pipelines\PoliCheckExclusions.xml

- task: BinSkim@4
  displayName: üîç Run BinSkim
  inputs:
    InputType: Basic
    Function: analyze
    TargetPattern: guardianGlob
    AnalyzeTargetGlob: $(BinSkimTargets)

- task: CopyFiles@2
  displayName: üîç Collect APIScan inputs
  inputs:
    SourceFolder: $(Build.ArtifactStagingDirectory)/Symbols-$(Agent.JobName)
    # Exclude any patterns from the Contents (e.g. `!**/git2*`) that we have symbols for but do not need to run APIScan on.
    Contents: |
      **
      !**/arm64/**
    TargetFolder: $(Build.ArtifactStagingDirectory)/APIScanInputs
  condition: and(succeeded(), ${{ parameters.EnableAPIScan }}, ne(variables.ApiScanClientId, ''))

- task: APIScan@2
  displayName: üîç Run APIScan
  inputs:
    softwareFolder: $(Build.ArtifactStagingDirectory)/APIScanInputs
    softwareName: $(SymbolsFeatureName)
    softwareVersionNum: $(NBGV_MajorMinorVersion)
    isLargeApp: false
    toolVersion: Latest
  condition: and(succeeded(), ${{ parameters.EnableAPIScan }}, ne(variables.ApiScanClientId, ''))
  env:
    AzureServicesAuthConnectionString: runAs=App;AppId=$(ApiScanClientId);TenantId=$(ApiScanTenant);AppKey=$(ApiScanSecret)

- task: SdtReport@2
  displayName: üìÉ Create Security Analysis Report
  inputs:
    GdnExportAllTools: true

- task: PublishSecurityAnalysisLogs@3
  displayName: üì¢ Publish Code Analysis Logs
  inputs:
    ArtifactName: CodeAnalysisLogs
    ArtifactType: Container
    PublishProcessedResults: true
    AllTools: true
    ToolLogsNotFoundAction: Standard

# Create bugs
- task: TSAUpload@2
  inputs:
    tsaVersion: 'TsaV2'
    codebase: 'NewOrUpdate'
    tsaEnvironment: 'PROD'
    codeBaseName: 'vs-servicehub'
    notificationAlias: 'vsideexeng@microsoft.com'
    notifyAlwaysV2: false
    codeBaseAdmins: 'REDMOND\rytoth;REDMOND\anva'
    instanceUrlForTsaV2: 'DEVDIV'
    projectNameDEVDIV: 'DevDiv'
    areaPath: 'DevDiv\VS Core\Extensibility\ServiceHub'
    iterationPath: 'DevDiv'
    uploadAPIScan: false
    uploadBinSkim: true
    uploadCredScan: true
    uploadFortifySCA: false
    uploadFxCop: false
    uploadModernCop: true
    uploadPoliCheck: true
    uploadPREfast: true
    uploadRoslyn: true
    uploadTSLint: true
    uploadAsync: true
  condition: ${{ parameters.TSAUpload }}

# Create bugs
- task: TSAUpload@2
  displayName: 'Create bugs for APIScan'
  inputs:
    GdnPublishTsaOnboard: false
    GdnPublishTsaConfigFile: '$(Build.SourcesDirectory)\azure-pipelines\TSAOptions.json'
  condition: and(succeeded(), ${{ parameters.TSAUpload }}, ${{ parameters.EnableAPIScan }})

- task: PostAnalysis@2
  displayName: üèãÔ∏è‚Äç‚ôÄÔ∏è Break on compliance issues
  inputs:
    GdnBreakAllTools: true
    GdnBreakGdnToolBinSkimSeverity: Warning
    GdnBreakSuppressionFiles: $(System.DefaultWorkingDirectory)/azure-pipelines/falsepositives.gdnsuppress
    GdnBreakSuppressionSets: falsepositives
    GdnBreakOutputSuppressionFile: $(Build.ArtifactStagingDirectory)/guardian_failures_as_suppressions/
    GdnBreakOutputSuppressionSet: falsepositives
  continueOnError: true # remove this line once we get things passing.

# This is useful when false positives appear so we can copy some of the output into the suppressions file.
- publish: $(Build.ArtifactStagingDirectory)/guardian_failures_as_suppressions
  artifact: guardian_failures_as_suppressions
  displayName: üîç Publish Guardian failures
  condition: failed()
